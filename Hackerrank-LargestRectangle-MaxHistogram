import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
/*Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars. 
For simplicity, assume that all bars have same width and the width is 1 unit.*/

public class Solution {

    // Complete the largestRectangle function below.
    static long largestRectangle(int[] h) {
  
        
        long area=0;
        long maxArea=0;
        int top=0;
        int i=0;
        Stack<Integer> st=new Stack<>();
        
        for(i=0;i<h.length;){
            if(st.isEmpty()|| h[st.peek()]<=h[i]){
                st.push(i++);
            }else{
                top=st.pop();
                
                if(st.isEmpty()){
                    area=h[top]*i;
                }else{
                    area=h[top]*(i-1-st.peek());
                }
            }
            if(area>maxArea)maxArea=area;
        }
        while(!st.isEmpty()){
             top=st.pop();
                
                if(st.isEmpty()){
                    area=h[top]*i;
                }else{
                    area=h[top]*(i-1-st.peek());
                }if(area>maxArea)maxArea=area;
            }
            
        
        return maxArea;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] h = new int[n];

        String[] hItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int hItem = Integer.parseInt(hItems[i]);
            h[i] = hItem;
        }

        long result = largestRectangle(h);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
